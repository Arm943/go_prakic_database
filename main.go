package main

import (
	"context"
	"fmt"
	"log"

	"github.com/jackc/pgx/v5"
)

var ctx = context.Background()

func menu(conn *pgx.Conn) {
	var userInputMenu int

	for {
		fmt.Print(`
	1 - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã |  2 - –î–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç
	--------------------------------------------------
	3 - –ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç      |  4 - –£–¥–∞–ª–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç
	--------------------------------------------------
	5 - –ü–æ–∏—Å–∫ –∫–æ–Ω—Ç–∞–∫—Ç–∞        |  6 - –ü–æ–∏—Å–∫ –ø–æ —Ç–µ–≥—É 
	--------------------------------------------------
	0 - –í—ã—Ö–æ–¥                 | 
	`)
		fmt.Print("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ")

		fmt.Scan(&userInputMenu)
		switch userInputMenu {
		case 1:
			showContactsWithTags(conn)
		case 2:
			addNumber(conn)
		case 3:
			update(conn)
		case 4:
			delete(conn)
		case 5:
			searchContact(conn)
		case 6:
			searchByTag(conn)
		case 0:
			return
		default:
			fmt.Println("–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
		}
	}

}

// –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã —Å –∏—Ö —Ç–µ–≥–∞–º–∏
func showContactsWithTags(conn *pgx.Conn) {
	// –ó–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ —Å –∏—Ö —Ç–µ–≥–∞–º–∏
	rows, err := conn.Query(ctx, `
	SELECT 
  users.id, 
  users.name, 
  users.phone_number, 
  STRING_AGG(tags.tag, ', ')
FROM users
JOIN users_tags ON users.id = users_tags.user_id
JOIN tags ON tags.id = users_tags.tag_id
GROUP BY users.id, users.name, users.phone_number;
	`)
	if err != nil {
		log.Fatalf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞: %v", err)
	}
	defer rows.Close()

	for rows.Next() {
		var id int
		var name, phone, tags string
		err := rows.Scan(&id, &name, &phone, &tags)
		if err != nil {
			log.Fatalf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Å—Ç—Ä–æ–∫–∏: %v", err)
		}
		fmt.Printf("üë§ %s üì± %s üè∑Ô∏è  %s\n", name, phone, tags)
	}
}

// —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏ –≤ –∫–Ω–∏–≥–µ
func addNumber(conn *pgx.Conn) {
	var name string
	var phoneNumber string
	var tag string
	var userID int
	var tagID int

	// –í–≤–æ–¥ –∏–º–µ–Ω–∏ –∏ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
	fmt.Print("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è: ")
	fmt.Scan(&name)
	fmt.Scanln() // –æ—á–∏—Å—Ç–∫–∞ –±—É—Ñ–µ—Ä–∞ \n
	fmt.Print("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: ")
	fmt.Scan(&phoneNumber)
	fmt.Scanln() // –æ—á–∏—Å—Ç–∫–∞ –±—É—Ñ–µ—Ä–∞ \n

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ
	if name == "" || phoneNumber == "" {
		fmt.Println("–ò–º—è –∏–ª–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º–∏!")
		return
	}

	// –í—Å—Ç–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü—É —á–µ—Ä–µ–∑ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
	tx, err := conn.Begin(ctx)
	if err != nil {
		log.Fatalf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: %v", err)
	}

	//–≤—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü—É –∏ –ø—Ä–∏ —ç—Ç–æ–º –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ ID
	err = tx.QueryRow(ctx, `INSERT INTO users (name, phone_number) VALUES($1, $2) RETURNING id;`, name, phoneNumber).Scan(&userID)
	if err != nil {
		tx.Rollback(ctx) // –µ—Å–ª–∏ –æ—à–∏–±–∫–∞ ‚Äî –æ—Ç–∫–∞—Ç
		log.Fatalf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: %v", err)
	}

	err = tx.Commit(ctx) // —Ñ–∏–∫—Å–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
	if err != nil {
		log.Fatalf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: %v", err)
	}

	// —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–µ–≥–æ–≤
	fmt.Print("–ü—Ä–æ–ø–∏—à–∏—Ç–µ —Ç–µ–≥–∏ –∫ –∫–æ–Ω—Ç–∞–∫—Ç—É: ")
	fmt.Scan(&tag)

	// –í—Å—Ç–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü—É
	err = conn.QueryRow(ctx, `
	INSERT INTO tags (tag) VALUES($1) ON CONFLICT (tag) DO NOTHING RETURNING id;
	`, tag).Scan(&tagID)
	if err == pgx.ErrNoRows {
		//—Ç–µ–≥ —É–∂–µ –µ—Å—Ç—å, –ø—Ä–æ—Å—Ç–æ –ø–æ–ª—É—á–∞–µ–º –µ–≥–æ ID
		err = conn.QueryRow(ctx, `SELECT id FROM tags WHERE tag = $1`, tag).Scan(&tagID)
		if err != nil {
			log.Fatalf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ id —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ç–µ–≥–∞: %v", err)
		}
	}

	// –°–≤—è–∑–∞—Ç—å userID –∏ tagID –≤ —Ç–∞–±–ª–∏—Ü–µ users_tags

	_, err = conn.Exec(ctx, `
	INSERT INTO users_tags (user_id, tag_id) VALUES($1,$2);
	`, userID, tagID)

	fmt.Println("–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã!")
}

// –∏–∑–º–µ–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
func update(conn *pgx.Conn) {
	var id int
	var userName string
	var phoneNumber string
	fmt.Print("–í–≤–µ–¥–∏—Ç–µ ID –∫–æ–Ω—Ç–∞–∫—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω—ã–π –∏–∑–º–µ–Ω–∏—Ç—å: ")
	fmt.Scan(&id)
	fmt.Scanln() // –æ—á–∏—Å—Ç–∫–∞ –±—É—Ñ–µ—Ä–∞ \n
	fmt.Print("–í–≤–µ–¥–∏—Ç–µ –∏–º—è: ")
	fmt.Scan(&userName)
	fmt.Scanln() // –æ—á–∏—Å—Ç–∫–∞ –±—É—Ñ–µ—Ä–∞ \n
	fmt.Print("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: ")
	fmt.Scan(&phoneNumber)

	tx, err := conn.Begin(ctx)
	if err != nil {
		log.Fatalf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: %v", err)
	}
	_, err = tx.Exec(ctx, `
	UPDATE users SET name = $1, phone_number = $2 WHERE id = $3;
`, userName, phoneNumber, id)

	if err != nil {
		tx.Rollback(ctx)
		log.Fatalf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: %v", err)
	}
	err = tx.Commit(ctx)
	if err != nil {
		log.Fatalf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: %v", err)
	}

	fmt.Println("–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã!")

}

// —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏
func delete(conn *pgx.Conn) {
	var id int
	fmt.Print("‚ùå –í–≤–µ–¥–∏—Ç–µ ID –∫–æ–Ω—Ç–∞–∫—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å: ")
	fmt.Scan(&id)

	_, err := conn.Exec(ctx, `
	DELETE FROM users WHERE id =$1;
	`, id)
	if err != nil {
		log.Fatalf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: %v", err)
	}
	fmt.Println("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!")
}

// –ø–æ–∏—Å–∫ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ –∏–º–µ–Ω–∏
func searchContact(conn *pgx.Conn) {
	var name string
	var id int
	var phoneNumber string

	fmt.Print("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –¥–ª—è –ø–æ–∏—Å–∫–∞: ")
	fmt.Scan(&name)

	//–ü–æ–∏—Å–∫ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∏–Ω–¥–µ–∫—Å–∞
	rows, err := conn.Query(ctx, `
	SELECT id, name, phone_number FROM users WHERE name = $1
	`, name)
	if err != nil {
		log.Fatalf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞: %v", err)
	}
	defer rows.Close()

	// –ï—Å–ª–∏ –µ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã, —Ç–æ –≤—ã–≤–æ–¥–∏–º –∏—Ö

	found := false
	for rows.Next() {
		err := rows.Scan(&id, &name, &phoneNumber)
		if err != nil {
			log.Fatalf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å—Ç—Ä–æ–∫–∏: %v", err)
		}
		fmt.Printf("–ù–∞–π–¥–µ–Ω –∫–æ–Ω—Ç–∞–∫—Ç: %s, %s, ID: %d\n", name, phoneNumber, id)
		found = true
	}

	if !found {
		fmt.Println("–ö–æ–Ω—Ç–∞–∫—Ç —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω.")
	}
	if rows.Err() != nil {
		log.Fatalf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–±–æ—Ä–µ —Å—Ç—Ä–æ–∫–∏: %v", err)
	}

}

// –ø–æ–∏—Å–∫ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –ø–æ —Ç–µ–≥–∞–º

func searchByTag(conn *pgx.Conn) {
	var tag string
	fmt.Print("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–≥ –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤—Å–µ—Ö –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤: ")
	fmt.Scan(&tag)

	// –ø–æ–∏—Å–∫ –ø–æ —Ç–µ–≥—É —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∏–Ω–¥–µ–∫—Å–∞
	rows, err := conn.Query(ctx, `
SELECT u.name, u.phone_number
		FROM users u
		JOIN users_tags ut ON u.id = ut.user_id
		JOIN tags t ON t.id = ut.tag_id
		WHERE t.tag = $1;
`, tag)
	if err != nil {
		log.Fatalf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞: %v", err)
	}
	defer rows.Close()

	// –≤—ã–≤–æ–¥–∏–º –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –ø–æ —Ç–µ–≥—É
	fmt.Println("–ö–æ–Ω—Ç–∞–∫—Ç—ã —Å —Ç–µ–≥–æ–º:", tag)
	for rows.Next() {
		var name, phoneNumber string
		err := rows.Scan(&name, &phoneNumber)
		if err != nil {
			log.Fatalf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—á–∏—Ç—ã–≤–∞–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: %v", err)
		}
		fmt.Printf("%s,  %s\n", name, phoneNumber)
	}
	// –ï—Å–ª–∏ –æ—à–∏–±–æ–∫ –Ω–µ—Ç, –≤—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ
	if err := rows.Err(); err != nil {
		log.Fatalf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Ç—Ä–æ–∫: %v", err)
	}
}

func main() {

	// –°—Ç—Ä–æ–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
	connStr := "postgres://postgres:1234@localhost:5432/mydb"

	// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ
	conn, err := pgx.Connect(ctx, connStr)
	if err != nil {
		log.Fatalf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: %v", err)
	}
	defer conn.Close(ctx)

	fmt.Println("‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ!")

	// –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç

	_, err = conn.Exec(ctx, `
CREATE TABLE IF NOT EXISTS users(
id SERIAL PRIMARY KEY,
name TEXT NOT NULL,
phone_number TEXT NOT NULL
);
`)
	if err != nil {
		log.Fatalf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã: %v", err)
	}
	fmt.Println("‚úÖ –¢–∞–±–ª–∏—Ü–∞ users —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!")

	// —Å–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Å —Ç–µ–≥–∞–º–∏

	_, err = conn.Exec(ctx, `
CREATE TABLE IF NOT EXISTS tags(
id SERIAL PRIMARY KEY,
tag TEXT NOT NULL
);
`)
	if err != nil {
		log.Fatalf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã —Ç–µ–≥–æ–≤: %v", err)
	}
	fmt.Println("‚úÖ –¢–∞–±–ª–∏—Ü–∞ tags —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!")

	// —Å–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—É—é —Ç–∞–±–ª–∏—Ü—É –¥–ª—è "–º–Ω–æ–≥–∏–µ-–∫–æ-–º–Ω–æ–≥–∏–º"

	_, err = conn.Exec(ctx, `
CREATE TABLE IF NOT EXISTS users_tags(
user_id INT REFERENCES users(id),
tag_id INT REFERENCES tags(id),
PRIMARY KEY (user_id,tag_id)
);
`)
	if err != nil {
		log.Fatalf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã users-tags: %v", err)
	}
	fmt.Println("‚úÖ –¢–∞–±–ª–∏—Ü–∞ users-tags —Ç–µ–≥–æ–≤ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!")

	// —Å–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å –ø–æ —Å—Ç–æ–ª–±—É name
	// –∏–Ω–¥–µ–∫—Å –ø–æ –∏–º–µ–Ω–∏
	_, err = conn.Exec(ctx, `
CREATE INDEX IF NOT EXISTS index_name ON users(name);
`)
	if err != nil {
		log.Fatalf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–Ω–¥–µ–∫—Å–∞ –ø–æ name: %v", err)
	}

	// —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å –ø–æ —Ç–µ–≥—É
	_, err = conn.Exec(ctx, `
CREATE UNIQUE INDEX IF NOT EXISTS idx_tag_unique ON tags(tag);
`)
	if err != nil {
		log.Fatalf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞ –ø–æ tag: %v", err)
	}
	fmt.Println("‚úÖ –ò–Ω–¥–µ–∫—Å—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã!")

	menu(conn)
	defer conn.Close(ctx)

}
